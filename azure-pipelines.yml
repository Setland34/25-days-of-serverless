# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '28988276-c379-4bb7-8487-88610dcb5919'

  # Function app name
  functionAppName: 'posadafinder'

  # Function app name - Production
  functionAppNameProd: 'posadafinder-prod'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/16-ci-cd-for-azure-functions/function'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy Development
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
     vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
  - job: TestDevelopment
    dependsOn: Deploy
    displayName: Test Function
    pool:
      server
    steps:
      - task: AzureFunction@1
        inputs:
          function: 'https://$(functionAppName).azurewebsites.net/api/PosadasFinder'
          key: '$(FunctionKey)'
          method: 'GET'
          waitForCompletion: 'false'

- stage: DeployProduction
  displayName: Deploy Production
  dependsOn: TestDevelopment
  condition: succeeded()

  jobs:
  - deployment: DeployProduction
    displayName: Deploy
    environment: 'release'
    pool:
     vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppNameProd)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
  - job: Test
    dependsOn: DeployProduction
    displayName: Test Function
    pool:
      server
    steps:
      - task: AzureFunction@1
        inputs:
          function: 'https://$(functionAppNameProd).azurewebsites.net/api/PosadasFinder'
          key: '$(FunctionKey)'
          method: 'GET'
          waitForCompletion: 'false'